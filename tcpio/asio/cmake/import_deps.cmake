cmake_minimum_required(VERSION 3.10)
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/internal_utils.cmake)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/dependencies/cmake")


SET(PROPERTY_FILE "${CMAKE_BINARY_DIR}/build.properties.local")
# SET(DEBUG_POSTFIX "d")

# load properties into ${PROPERTIES}
MACRO(READ_PROPERTIES PROPERTIES)
  if (NOT (EXISTS ${PROPERTY_FILE}))
    message(FATAL_ERROR "CONFIG FILE `${PROPERTY_FILE}` not EXISTS")
  endif ()
  message(STATUS "READ CONFIG FROM FILE:${PROPERTY_FILE}")
  LOAD_PROPERTY(${PROPERTIES} ${PROPERTY_FILE}) 
ENDMACRO()



# init platform info from ${PROPERTIES}
MACRO(INIT_PLATFORM_INFO PROPERTIES)
  MAP_GET(${PROPERTIES} platform platform)
  MAP_GET(${PROPERTIES} architecture architecture)
  MAP_GET(${PROPERTIES} architecture arch)
  MAP_GET(${PROPERTIES} vendor vendor)
  MAP_GET(${PROPERTIES} toolchain toolchain)
ENDMACRO()

# init dependency info from ${PROPERTIES}
MACRO(INIT_DEPENDENCY_INFO)
  set(DEPENDENCIES_DIR "${PROJECT_SOURCE_DIR}/dependencies/${platform}_${architecture}/")
  set(suffix "${platform}_^_")
  if (NOT(${arch} STREQUAL "default"))
    string(REPLACE "_^_" "_${arch}_^_" suffix ${suffix})
  endif()
  if (NOT(${vendor} STREQUAL "default"))
    string(REPLACE "_^_" "_${vendor}_^_" suffix ${suffix})
  endif()
  if (NOT(${toolchain} STREQUAL "default"))
    string(REPLACE "_^_" "_${toolchain}_^_" suffix ${suffix})
  endif()
  string(REPLACE "_^_" "" suffix ${suffix})
  message("dep file dep_${suffix}.tmp")
  set(dep_file "${DEPENDENCIES_DIR}dep_${suffix}.tmp")

  set(lines "")
  GETLINES(lines ${dep_file})
  set(DEPENDENCIES_PATH ${lines})
  foreach (line ${lines})
    set(INCLUDE_SEARCH_PATH "${DEPENDENCIES_DIR}${line}/include")
    set(LINK_SEARCH_PATH "${DEPENDENCIES_DIR}${line}/lib")
    include_directories(${INCLUDE_SEARCH_PATH})
    message(STATUS "ADD HEADER SEARCH PATH:${INCLUDE_SEARCH_PATH}")
    link_directories(${LINK_SEARCH_PATH})
    message(STATUS "ADD LIBRARY SEARCH PATH:${LINK_SEARCH_PATH}")
  endforeach ()
ENDMACRO()


READ_PROPERTIES(properties)
INIT_PLATFORM_INFO(properties)
INIT_DEPENDENCY_INFO()

FUNCTION(FIND_DEPENDENCY_PATH _NAME _PATH_OUT)
  foreach(line ${DEPENDENCIES_PATH})
    if (${line} MATCHES ${_NAME})
      set(${_PATH_OUT} ${DEPENDENCIES_DIR}${line} PARENT_SCOPE)
      break()
    endif()
  endforeach(line ${lines})
ENDFUNCTION(FIND_DEPENDENCY_PATH)

FUNCTION(INSTALL_DEPENDENCY _NAME)
  foreach(line ${DEPENDENCIES_PATH})
    if (${line} MATCHES ${_NAME})
      if (MSVC)
        install(DIRECTORY ${DEPENDENCIES_DIR}${line}/lib/ DESTINATION bin)
      else()
        install(DIRECTORY ${DEPENDENCIES_DIR}${line}/lib/ DESTINATION lib)
      endif()
      if (EXISTS "${DEPENDENCIES_DIR}${line}/bin")
        install(DIRECTORY ${DEPENDENCIES_DIR}${line}/bin/ DESTINATION bin)
      endif()
      break()
    endif()
  endforeach(line ${lines})
ENDFUNCTION(INSTALL_DEPENDENCY)

FUNCTION(INSTALL_JSON )
    if (${platform}_${architecture} STREQUAL "linux_default")
        set(json_path ${DEPENDENCIES_DIR}com.hobot.native.bole.hobot/communication/config)
    elseif (${platform}_${architecture} STREQUAL "linux_aarch64")
        set(json_path ${DEPENDENCIES_DIR}hobot/com.hobot.native.bole.hobot/communication/config)
    else ()
    endif()
    install(DIRECTORY ${json_path}/ DESTINATION bin)
ENDFUNCTION(INSTALL_JSON)

function(target_link_dep_libraries target access)
  foreach (lib ${ARGN})
    target_link_libraries(${target} ${access} debug "${lib}${DEBUG_POSTFIX}" optimized ${lib})
  endforeach ()
endfunction()
